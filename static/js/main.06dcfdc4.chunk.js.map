{"version":3,"sources":["components/App/App.styles.js","components/Picker/Picker.js","components/Swatch/Swatch.styles.js","components/Swatch/Swatch.js","components/ColorInput/ColorInput.styles.js","components/ColorInput/ColorInput.js","helpers/useColorPicker.js","components/App/App.js","serviceWorker.js","index.js"],"names":["useStyles","createUseStyles","App","height","display","justifyContent","alignItems","Picker","setColor","canvasRef","useRef","useEffect","ctx","current","getContext","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","width","ref","onClick","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","getMousePos","pixel","getImageData","data","id","defaultProps","Swatch","background","color","border","props","classes","className","ColorInput","borderBottom","padding","fontSize","console","log","type","value","disabled","name","useColorPicker","useState","rgb","r","g","b","Math","min","max","cmin","cmax","delta","h","sqrt","pow","round","l","toFixed","s","abs","RGBtoHSL","changeColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06dcfdc4.chunk.js","sourcesContent":["import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n    App: {\r\n        height: '100vh',\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    }\r\n})\r\n\r\nexport default useStyles;","import React, { useRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Picker = ({setColor}) => {\r\n    const canvasRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        const gradient = ctx.createLinearGradient(0, 0, 100, 100)\r\n        gradient.addColorStop(0, \"black\");\r\n        gradient.addColorStop(1, \"blue\");\r\n        ctx.fillStyle = gradient\r\n        ctx.fillRect(0, 0, 100, 100)\r\n    })\r\n\r\n    const handleClick = e => {\r\n        const { x, y } = getMousePos(canvasRef, e)\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d');\r\n        const pixel = ctx.getImageData(x, y, 1, 1).data;\r\n        setColor(pixel)\r\n    }\r\n\r\n    return (\r\n        <canvas height={100} width={100} ref={canvasRef} onClick={handleClick} id=\"picker\">\r\n\r\n        </canvas>\r\n    )\r\n}\r\n\r\nfunction getMousePos(ref, e) {\r\n    var rect = ref.current.getBoundingClientRect();\r\n    return {\r\n        x: e.clientX - rect.left,\r\n        y: e.clientY - rect.top\r\n    };\r\n}\r\n\r\nPicker.propTypes = {\r\n    setColor: PropTypes.func,\r\n}\r\n\r\nPicker.defaultProps = {\r\n    setColor: () => null\r\n}\r\n\r\nexport default Picker\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n    Swatch: {\r\n        width: 100,\r\n        height: 50,\r\n        background: ({color}) => color,\r\n        border: \"1px solid black\"\r\n    }\r\n})\r\n\r\nexport default useStyles;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport useStyles from './Swatch.styles'\r\n\r\nconst Swatch = props => {\r\n    const classes = useStyles(props);\r\n    return (\r\n        <div className={classes.Swatch} id=\"swatch\">\r\n        </div>\r\n    )\r\n}\r\n\r\nSwatch.propTypes = {}\r\n\r\nSwatch.defaultProps = {}\r\n\r\nexport default Swatch\r\n","import { createUseStyles } from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n    ColorInput: {\r\n        display: 'flex',\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n        width: 100,\r\n        height: 50,\r\n        border: \"1px solid black\",\r\n        borderBottom: \"none\",\r\n        padding: [4, 6],\r\n        \"& input\": {\r\n            fontSize: 8,\r\n            width: \"100%\"\r\n        }\r\n    }\r\n})\r\n\r\nexport default useStyles;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport useStyles from './ColorInput.styles'\r\n\r\nconst ColorInput = ({color}) => {\r\n    const classes = useStyles();\r\n    console.log(color)\r\n    return (\r\n        <div className={classes.ColorInput}>\r\n            <input type=\"text\" value={color} disabled name=\"color\" id=\"hstString\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nColorInput.propTypes = {}\r\n\r\nColorInput.defaultProps = {}\r\n\r\nexport default ColorInput\r\n","import { useState } from 'react'\r\n\r\nfunction useColorPicker() {\r\n    const [color, setColor] = useState(\"hsl(360, 100%, 100%)\")\r\n\r\n    const changeColor = (rgb) => {\r\n        setColor(RGBtoHSL(rgb))\r\n    };\r\n\r\n    return [color, changeColor]\r\n}\r\n\r\nfunction RGBtoHSL(rgb) {\r\n    const r = rgb[0] / 255\r\n    const g = rgb[1] / 255\r\n    const b = rgb[2] / 255\r\n    console.log({ r, g, b })\r\n    const [cmin, cmax] = [Math.min(r, g, b), Math.max(r, g, b)]\r\n    const delta = +(cmax - cmin)\r\n\r\n    const getH = () => Math.round((() => {\r\n        // no difference\r\n        if (delta === 0)\r\n            return 0;\r\n        // red is max\r\n        if (cmax === r)\r\n            return (+(g - b) / delta) % 6;\r\n        // green is max\r\n        if (cmax === g)\r\n            return +(b - r) / delta + 2;\r\n        // blue is max\r\n        if (cmax === b)\r\n            return (r - g) / delta - 4;\r\n\r\n    })() * 60)\r\n    const h = Math.sqrt(Math.pow(getH(), 2));\r\n\r\n    const getL = () => +((cmax + cmin) * 50).toFixed(1)\r\n    const l = getL();\r\n\r\n    const getS = () => delta === 0 ? 0 : ((1 - Math.abs(2 * (l / 100) - 1)) * 100).toFixed(1)\r\n    const s = getS()\r\n\r\n    return `hsl(${h}, ${s}%, ${l}%)`\r\n\r\n\r\n\r\n}\r\n\r\nexport default useColorPicker","import React from 'react';\r\nimport useStyles from './App.styles'\r\nimport Picker from 'components/Picker';\r\nimport Swatch from 'components/Swatch';\r\nimport ColorInput from 'components/ColorInput';\r\nimport useColorPicker from 'helpers/useColorPicker';\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [color, changeColor] = useColorPicker();\r\n  console.log(color)\r\n  return (\r\n    <div className={classes.App}>\r\n      <Picker setColor={changeColor} />\r\n      <div>\r\n      <ColorInput color={color}/>\r\n      <Swatch color={color} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from 'components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}